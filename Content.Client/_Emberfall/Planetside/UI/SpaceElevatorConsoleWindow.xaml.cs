// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at https://mozilla.org/MPL/2.0/.
//
// This Source Code Form is "Incompatible With Secondary
// Licenses", as defined by the Mozilla Public License, v. 2.0.

using Content.Client.UserInterface.Controls;
using Content.Shared._Emberfall.Planetside;
using Content.Shared._Emberfall.Planetside.Components;
using Content.Shared.Shuttles.Systems;
using Content.Shared.Timing;
using Robust.Client.AutoGenerated;
using Robust.Client.Graphics;
using Robust.Client.UserInterface.XAML;
using Robust.Shared.Timing;

namespace Content.Client._Emberfall.Planetside.UI;

[GenerateTypedNameReferences]
public sealed partial class SpaceElevatorConsoleWindow : FancyWindow
{
    [Dependency] private readonly IEntityManager _entMan = default!;
    [Dependency] private readonly IGameTiming _timing = default!;

    public event Action<int>? OnFTL;

    private readonly Dictionary<FTLState, (string Color, string Loc)> _stateData = new()
    {
        { FTLState.Available, ("#80C71F", "shuttle-console-ftl-state-Available") },
        { FTLState.Starting, ("#169C9C", "shuttle-console-ftl-state-Starting") },
        { FTLState.Travelling, ("#8932B8", "shuttle-console-ftl-state-Travelling") },
        { FTLState.Arriving, ("#F9801D", "shuttle-console-ftl-state-Arriving") },
    };

    private readonly StyleBoxFlat _ftlStyle;
    private FTLState _state;
    private int? _selected;
    private StartEndTime _ftlTime;

    public SpaceElevatorConsoleWindow(EntityUid owner)
    {
        RobustXamlLoader.Load(this);
        IoCManager.InjectDependencies(this);

        _ftlStyle = new StyleBoxFlat()
        {
            BackgroundColor = Color.FromHex("#80C71F"),
            ContentMarginLeftOverride = 4,
            ContentMarginRightOverride = 4
        };
        FTLBar.ForegroundStyleBoxOverride = _ftlStyle;

        if (!_entMan.TryGetComponent<SpaceElevatorConsoleComponent>(owner, out var comp))
            return;

        if (!comp.HasPlatform)
        {
            MapFTLState.Text = Loc.GetString("space-elevator-no-shuttle");
            _ftlStyle.BackgroundColor = Color.FromHex("#B02E26");
        }

        SetupEventHandlers();
    }

    private void SetupEventHandlers()
    {
        Destinations.OnItemSelected += args =>
        {
            _selected = args.ItemIndex;
            UpdateButton();
        };

        Destinations.OnItemDeselected += _ =>
        {
            _selected = null;
            UpdateButton();
        };

        FTLButton.OnPressed += _ =>
        {
            if (_selected is { } index)
            {
                OnFTL?.Invoke(index);
                FTLButton.Disabled = true;
            }
        };
    }

    public void UpdateState(SpaceElevatorConsoleState state)
    {
        _state = state.FTLState;
        _ftlTime = state.FTLTime;

        var (color, locString) = _stateData.GetValueOrDefault(_state,
            ("#B02E26", "shuttle-console-ftl-state-Cooldown"));

        MapFTLState.Text = Loc.GetString(locString);
        _ftlStyle.BackgroundColor = Color.FromHex(color);

        if (Destinations.Count != state.Destinations.Count)
        {
            UpdateDestinations(state.Destinations);
        }

        UpdateButton();
    }

    private void UpdateDestinations(List<ElevatorDestination> destinations)
    {
        Destinations.Clear();
        foreach (var dest in destinations)
        {
            Destinations.AddItem(dest.Name);
        }
    }

    protected override void FrameUpdate(FrameEventArgs args)
    {
        base.FrameUpdate(args);

        var progress = _ftlTime.ProgressAt(_timing.CurTime);
        FTLBar.Value = float.IsFinite(progress) ? progress : 1;

        UpdateButton();
    }

    private void UpdateButton()
    {
        FTLButton.Disabled = _selected == null || _state != FTLState.Available;
    }
}
