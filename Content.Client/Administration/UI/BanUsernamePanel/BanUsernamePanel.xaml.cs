using Content.Client.Administration.Managers;
using Robust.Client.AutoGenerated;
using Robust.Client.UserInterface;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.CustomControls;
using Robust.Client.UserInterface.XAML;
using Robust.Shared.Timing;
using Robust.Shared.Utility;


namespace Content.Client.Administration.UI.BanUsernamePanel;

[GenerateTypedNameReferences]
public sealed partial class BanUsernamePanel : DefaultWindow
{
    public event Action<string, string?, bool, bool>? UsernameBanSubmitted;
    private bool HasBanFlag { get; set; }
    private bool HasMassBanFlag { get; set; }

    private TimeSpan? ButtonResetOn { get; set; }

    [Dependency] private readonly IGameTiming _gameTiming = default!;
    [Dependency] private readonly IClientUsernameBanCacheManager _usernameRuleCacheManager = default!;

    private enum TabNumbers
    {
        Create,
        List,
    }

    public BanUsernamePanel()
    {
        RobustXamlLoader.Load(this);
        IoCManager.InjectDependencies(this);

        ExtendToBanCheckbox.Pressed = false;
        RegexCheckbox.Pressed = false;

        SubmitButton.OnPressed += SubmitButtonOnPressed;
        RefreshBansButton.OnPressed += RefreshButtonOnPressed;

        Tabs.SetTabTitle((int)TabNumbers.Create, Loc.GetString("username-ban-panel-create"));
        Tabs.SetTabTitle((int)TabNumbers.List, Loc.GetString("username-ban-panel-view"));

        ReasonTextEdit.Placeholder = new Rope.Leaf(Loc.GetString("username-ban-panel-reason"));
    }

    private void ResetTextEditor(GUIBoundKeyEventArgs _)
    {
        ReasonTextEdit.ModulateSelfOverride = null;
        ReasonTextEdit.OnKeyBindDown -= ResetTextEditor;
    }

    private void SubmitButtonOnPressed(BaseButton.ButtonEventArgs obj)
    {

        var usernameRule = UsernameRuleLine.Text;
        if (string.IsNullOrWhiteSpace(usernameRule))
        {
            UsernameRuleLine.ModulateSelfOverride = Color.Red;
            return;
        }


        var reason = Rope.Collapse(ReasonTextEdit.TextRope);
        if (string.IsNullOrWhiteSpace(reason))
        {
            ReasonTextEdit.GrabKeyboardFocus();
            ReasonTextEdit.ModulateSelfOverride = Color.Red;
            ReasonTextEdit.OnKeyBindDown += ResetTextEditor;
            return;
        }

        var extendToBan = ExtendToBanCheckbox.Pressed;

        var regex = RegexCheckbox.Pressed;

        UsernameBanSubmitted?.Invoke(usernameRule, reason, extendToBan, regex);
    }

    public void RefreshButtonOnPressed(BaseButton.ButtonEventArgs obj)
    {
        // this should be rate limited on the server (one request per 5 min?)
        _usernameRuleCacheManager.RequestUsernameBans();
    }

    protected override void FrameUpdate(FrameEventArgs args)
    {
        base.FrameUpdate(args);

        if (_gameTiming.CurTime > ButtonResetOn)
        {
            ButtonResetOn = null;
            SubmitButton.ModulateSelfOverride = null;
            SubmitButton.Text = Loc.GetString("username-ban-panel-submit");
        }
    }

    public void UpdateBanFlag(bool banFlag)
    {
        HasBanFlag = banFlag;
        SubmitButton.Visible = HasBanFlag;
        ModulateSelfOverride = HasBanFlag ? Color.Red : null;
    }

    public void UpdateMassBanFlag(bool massBanFlag)
    {
        HasMassBanFlag = massBanFlag;
        RegexCheckbox.Visible = HasMassBanFlag;
        if (RegexCheckbox.Pressed && !HasMassBanFlag)
        {
            RegexCheckbox.Pressed = false;
        }
    }

    public void SubscribeToListSelectionChange(Action<int?> onChange)
    {
        UsernameBanList.OnSelectionChanged += onChange;
    }
}
