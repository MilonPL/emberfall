using Content.Shared.CCVar;
using Robust.Client.AutoGenerated;
using Robust.Client.Console;
using Robust.Client.UserInterface;
using Robust.Client.UserInterface.XAML;
using Robust.Shared.Configuration;
using static Robust.Client.UserInterface.Controls.BaseButton;

namespace Content.Client.Administration.UI.Tabs
{
    [GenerateTypedNameReferences]
    public sealed partial class ServerTab : Control
    {
        [Dependency] private readonly IConfigurationManager _config = default!;
        [Dependency] private readonly IClientConsoleHost _console = default!;
        private readonly ShutdownConfirmationWindow _shutdownWindow;

        public ServerTab()
        {
            RobustXamlLoader.Load(this);
            IoCManager.InjectDependencies(this);

            _shutdownWindow = new ShutdownConfirmationWindow();

            ShutdownButton.OnPressed += OnShutdownButtonPressed;
            _shutdownWindow.ConfirmButton.OnPressed += OnConfirmShutdownPressed;
            _shutdownWindow.CancelButton.OnPressed += OnCancelShutdownPressed;

            _config.OnValueChanged(CCVars.OocEnabled, OocEnabledChanged, true);
            _config.OnValueChanged(CCVars.LoocEnabled, LoocEnabledChanged, true);
        }

        private void OocEnabledChanged(bool value)
        {
            SetOocButton.Pressed = value;
        }

        private void LoocEnabledChanged(bool value)
        {
            SetLoocButton.Pressed = value;
        }

        private void OnShutdownButtonPressed(ButtonEventArgs args)
        {
            _shutdownWindow.OpenCentered();
        }

        private void OnConfirmShutdownPressed(ButtonEventArgs args)
        {
            ShutdownServer();
            _shutdownWindow.Close();
        }

        private void OnCancelShutdownPressed(ButtonEventArgs args)
        {
            _shutdownWindow.Close();
        }

        private void ShutdownServer()
        {
            _console.RemoteExecuteCommand(null, "shutdown");
        }

        protected override void Dispose(bool disposing)
        {
            base.Dispose(disposing);

            if (disposing)
            {
                ShutdownButton.OnPressed -= OnShutdownButtonPressed;
                _shutdownWindow.ConfirmButton.OnPressed -= OnConfirmShutdownPressed;
                _shutdownWindow.CancelButton.OnPressed -= OnCancelShutdownPressed;

                _shutdownWindow.Dispose();

                _config.UnsubValueChanged(CCVars.OocEnabled, OocEnabledChanged);
                _config.UnsubValueChanged(CCVars.LoocEnabled, LoocEnabledChanged);
            }
        }
    }
}
