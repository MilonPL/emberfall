using Content.Shared.Administration;
using Content.Shared.Mind;
using Robust.Client.AutoGenerated;
using Robust.Client.Graphics;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.XAML;
using Robust.Shared.Prototypes;

namespace Content.Client.Administration.UI.Tabs.PlayerTab;

[GenerateTypedNameReferences]
public sealed partial class PlayerTabEntry : PanelContainer
{

    [Dependency] private readonly IPrototypeManager _prototypeManager = default!;

    public NetEntity? PlayerEntity;

    public PlayerTabEntry(PlayerInfo player, StyleBoxFlat styleBoxFlat)
    {
        RobustXamlLoader.Load(this);

        UsernameLabel.Text = player.Username;
        if (!player.Connected)
            UsernameLabel.StyleClasses.Add("Disabled");
        JobLabel.Text = player.StartingJob;
        CharacterLabel.Text = player.CharacterName;
        if (player.IdentityName != player.CharacterName)
            CharacterLabel.Text += $" [{player.IdentityName}]";
        AntagonistLabel.Text = Loc.GetString(player.Antag ? "player-tab-is-antag-yes" : "player-tab-is-antag-no"); // TODO:ERRANT LATER: Decide to remove this (and all of its ilk) or not

        var protoId = player.MindRole.Prototype.ToString();
        //TODO:ERRANT shit why is this always null
        if (_prototypeManager is not null && _prototypeManager.TryIndex<MindRoleCorePrototype>(protoId, out var proto1212))
        {
            MindRoleLabel.Text = Loc.GetString(proto1212.Name);
            MindRoleLabel.FontColorOverride = proto1212.Color;
        }
        BackgroundColorPanel.PanelOverride = styleBoxFlat;
        OverallPlaytimeLabel.Text = player.PlaytimeString;
        PlayerEntity = player.NetEntity;
    }
}
