using Content.Client.Administration.Managers;
using Robust.Client.AutoGenerated;
using Robust.Client.UserInterface.CustomControls;
using Robust.Client.UserInterface.XAML;
using Robust.Shared.Network;
using Robust.Shared.Player;
using Robust.Shared.Utility;

namespace Content.Client.Administration.UI.PlayerPanel;

[GenerateTypedNameReferences]
public sealed partial class PlayerPanel : DefaultWindow
{
    private readonly IClientAdminManager _adminManager = default!;

    public event Action<NetUserId?>? OnOpenNotes;
    public event Action<NetUserId?>? OnOpenBans;
    public event Action<String?>? OnKick;
    public event Action<NetUserId?>? OnAhelp;
    public event Action<NetUserId?>? OnOpenBanPanel;
    public event Action<NetUserId?, bool>? OnWhitelistToggle;
    public event Action? OnFreezeToggle;

    public NetUserId? TargetPlayer;
    public string? TargetUsername;
    private bool _isWhitelisted;

    public PlayerPanel(IClientAdminManager adminManager)
    {
            RobustXamlLoader.Load(this);
            _adminManager = adminManager;

            BanButton.OnPressed += _ => OnOpenBanPanel?.Invoke(TargetPlayer);
            KickButton.OnPressed += _ => OnKick?.Invoke(TargetUsername);
            NotesButton.OnPressed += _ => OnOpenNotes?.Invoke(TargetPlayer);
            ShowBansButton.OnPressed += _ => OnOpenBans?.Invoke(TargetPlayer);
            AhelpButton.OnPressed += _ => OnAhelp?.Invoke(TargetPlayer);
            WhitelistToggle.OnPressed += _ =>
            {
                OnWhitelistToggle?.Invoke(TargetPlayer, _isWhitelisted);
                SetWhitelisted(!_isWhitelisted);
            };
            FreezeToggleButton.OnPressed += _ => OnFreezeToggle?.Invoke();
    }

    public void SetTitle(string player)
    {
        Title = Loc.GetString("player-panel-title", ("player", player));
    }

    public void SetWhitelisted(bool? whitelisted)
    {
        if (whitelisted == null)
        {
            Whitelisted.Text = null;
            WhitelistToggle.Visible = false;
        }
        else
        {
            Whitelisted.Text = Loc.GetString("player-panel-whitelisted");
            WhitelistToggle.Text = whitelisted.Value.ToString();
            WhitelistToggle.Visible = true;
            _isWhitelisted = whitelisted.Value;
        }
    }

    public void SetBans(int? totalBans, int? totalRoleBans)
    {
        // If one value exists then so should the other.
        DebugTools.Assert(totalBans.HasValue && totalRoleBans.HasValue || totalBans == null && totalRoleBans == null);

        if (totalBans != null)
        {
            Bans.Text = Loc.GetString("player-panel-bans", ("totalBans", totalBans));
        }
        else
        {
            Bans.Text = null;
        }

        if (totalRoleBans != null)
        {
            RoleBans.Text = Loc.GetString("player-panel-rolebans", ("totalRoleBans", totalRoleBans));
        }
        else
        {
            RoleBans.Text = null;
        }
    }

    public void SetNotes(int? totalNotes)
    {
        if (totalNotes != null)
        {
            Notes.Text = Loc.GetString("player-panel-notes", ("totalNotes", totalNotes));
        }
        else
        {
            Notes.Text = null;
        }
    }

    public void SetPlaytime(TimeSpan playtime)
    {
        Playtime.Text = Loc.GetString("player-panel-playtime",
            ("days", playtime.Days),
            ("hours", playtime.Hours % 24),
            ("minutes", playtime.Minutes % (24 * 60)));
    }

    public void SetFrozen(bool canFreeze, bool frozen)
    {
        FreezeToggleButton.Disabled = !canFreeze;

        FreezeToggleButton.Text = Loc.GetString(!frozen ? "player-panel-freeze" : "player-panel-unfreeze");
    }

    public void SetAhelp(bool canAhelp)
    {
        AhelpButton.Disabled = !canAhelp;
    }

    public void SetButtons()
    {
        BanButton.Disabled = !_adminManager.CanCommand("banpanel");
        KickButton.Disabled = !_adminManager.CanCommand("kick");
        NotesButton.Disabled = !_adminManager.CanCommand("adminnotes");
        ShowBansButton.Disabled = !_adminManager.CanCommand("banlist");
        WhitelistToggle.Disabled =
            !(_adminManager.CanCommand("addwhitelist") && _adminManager.CanCommand("removewhitelist"));

    }
}
