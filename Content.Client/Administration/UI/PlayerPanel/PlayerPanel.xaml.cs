using Robust.Client.AutoGenerated;
using Robust.Client.UserInterface.CustomControls;
using Robust.Shared.Player;
using Robust.Shared.Utility;

namespace Content.Client.Administration.UI.PlayerPanel;

[GenerateTypedNameReferences]
public sealed partial class PlayerPanel : DefaultWindow
{
    public event Action<ICommonSession>? OnOpenNotes;
    public event Action<ICommonSession>? OnOpenBans;
    public event Action<ICommonSession>? OnOpenAhelp;
    public event Action<ICommonSession>? OnFreezeAndMute;
    public event Action<ICommonSession>? OnUnfreeze;
    public event Action<ICommonSession>? OnKick;
    public event Action<ICommonSession>? OnOpenBanPanel;

    public void SetTitle(string player)
    {
        Title = Loc.GetString("player-panel-title", ("player", player));
    }

    public void SetWhitelisted(bool? whitelisted)
    {
        if (whitelisted == null)
        {
            Whitelisted.Text = null;
            WhitelistToggle.Visible = false;
        }
        else
        {
            Whitelisted.Text = Loc.GetString("player-panel-whitelisted");
            WhitelistToggle.Text = whitelisted.Value.ToString();
            WhitelistToggle.Visible = true;
        }
    }

    public void SetBans(int? totalBans, int? totalRoleBans)
    {
        // If one value exists then so should the other.
        DebugTools.Assert(totalBans.HasValue && totalRoleBans.HasValue || totalBans == null && totalRoleBans == null);

        if (totalBans != null)
        {
            Bans.Text = Loc.GetString("player-panel-bans", ("totalBans", totalBans));
        }
        else
        {
            Bans.Text = null;
        }

        if (totalRoleBans != null)
        {
            RoleBans.Text = Loc.GetString("player-panel-rolebans", ("totalRoleBans", totalRoleBans));
        }
        else
        {
            RoleBans.Text = null;
        }
    }

    public void SetNotes(int? totalNotes)
    {
        if (totalNotes != null)
        {
            Notes.Text = Loc.GetString("player-panel-notes", ("totalNotes", totalNotes));
        }
        else
        {
            Notes.Text = null;
        }
    }

    public void SetPlaytime(TimeSpan playtime)
    {
        Playtime.Text = Loc.GetString("player-panel-playtime",
            ("days", playtime.Days),
            ("hours", playtime.Hours % 24),
            ("minutes", playtime.Minutes % (24 * 60)));
    }
}
