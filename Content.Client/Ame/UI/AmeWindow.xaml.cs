using System.Linq;
using Content.Client.UserInterface;
using Content.Shared.Ame.Components;
using Robust.Client.AutoGenerated;
using Robust.Client.Player;
using Robust.Client.UserInterface.CustomControls;
using Robust.Client.UserInterface.XAML;
using Content.Shared.Access.Systems;

namespace Content.Client.Ame.UI
{
    [GenerateTypedNameReferences]
    public sealed partial class AmeWindow : DefaultWindow
    {
        [Dependency] private readonly IEntityManager _entityManager = default!;

        [Dependency] private readonly IPlayerManager _player = default!;

        private readonly AccessReaderSystem _accessReader;

        private EntityUid _entity;

        public event Action<UiButton>? OnAmeButton;

        public AmeWindow()
        {
            RobustXamlLoader.Load(this);
            IoCManager.InjectDependencies(this);

            _accessReader = _entityManager.System<AccessReaderSystem>();
            EjectButton.OnPressed += _ => OnAmeButton?.Invoke(UiButton.Eject);
            ToggleInjection.OnPressed += _ => OnAmeButton?.Invoke(UiButton.ToggleInjection);
            IncreaseFuelButton.OnPressed += _ => OnAmeButton?.Invoke(UiButton.IncreaseFuel);
            DecreaseFuelButton.OnPressed += _ => OnAmeButton?.Invoke(UiButton.DecreaseFuel);
        }

        public void SetEntity(EntityUid uid)
        {
            _entity = uid;
        }

        /// <summary>
        /// Update the UI state when new state data is received from the server.
        /// </summary>
        /// <param name="state">State data sent by the server.</param>
        public void UpdateState(BoundUserInterfaceState state)
        {
            var castState = (AmeControllerBoundUserInterfaceState) state;
            bool hasAccess = _player.LocalSession?.AttachedEntity is {} player
            && _accessReader.IsAllowed(player, _entity);

            // Disable all buttons if not powered
            if (Contents.Children.Any())
            {
                ButtonHelpers.SetButtonDisabledRecursive(Contents, !castState.HasPower);
                EjectButton.Disabled = false;
            }

            if (!castState.HasFuelJar)
            {
                EjectButton.Disabled = true;
                ToggleInjection.Disabled = true;
                FuelAmount.Text = Loc.GetString("ame-window-fuel-not-inserted-text");
            }
            else
            {
                EjectButton.Disabled = false;
                ToggleInjection.Disabled = false;
                FuelAmount.Text = $"{castState.FuelAmount}";
            }

            if (!castState.IsMaster)
            {
                ToggleInjection.Disabled = true;
            }

            if (!castState.Injecting)
            {
                InjectionStatus.Text = Loc.GetString("ame-window-engine-injection-status-not-injecting-label") + " ";
            }
            else
            {
                InjectionStatus.Text = Loc.GetString("ame-window-engine-injection-status-injecting-label") + " ";
            }

            if (!hasAccess)
            {
                EjectButton.Disabled = true;
                ToggleInjection.Disabled = true;
                IncreaseFuelButton.Disabled = true;
                DecreaseFuelButton.Disabled = true;
            }

            CoreCount.Text = $"{castState.CoreCount}";
            InjectionAmount.Text = $"{castState.InjectionAmount}";
            // format power statistics to pretty numbers
            CurrentPowerSupply.Text = $"{castState.CurrentPowerSupply:N1}";
            TargetedPowerSupply.Text = $"{castState.TargetedPowerSupply:N1}";
        }
    }
}
