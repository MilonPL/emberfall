using Content.Client.UserInterface.Controls;
using Content.Shared.Changeling.Transform;
using Content.Shared.Humanoid;
using Robust.Client.AutoGenerated;
using Robust.Client.GameObjects;
using Robust.Client.UserInterface.XAML;
using Robust.Shared.Map;
using Robust.Shared.Prototypes;

namespace Content.Client.Changeling.Transform;

[GenerateTypedNameReferences]
public sealed partial class ChangelingTransformMenu : FancyWindow
{
    [Dependency] private readonly IEntityManager _entity = default!;
    [Dependency] private readonly IPrototypeManager _prototype = default!;
    [Dependency] private readonly SharedHumanoidAppearanceSystem _appearance = default!;
    public event Action<NetEntity>? OnIdentitySelect;

    private readonly List<EntityUid> _spawnedNullSpaceEntities = [];
    public ChangelingTransformMenu()
    {
        RobustXamlLoader.Load(this);
        IoCManager.InjectDependencies(this);
    }

    protected override void ExitedTree()
    {
        foreach (var entity in _spawnedNullSpaceEntities)
        {
            _entity.DeleteEntity(entity);
        }
    }

    public void UpdateState(ChangelingTransformBoundUserInterfaceState state)
    {
        IdentitiesGrid.DisposeAllChildren();
        foreach (var identity in state.Identites)
        {
            var x = _entity.Spawn(_prototype.Index(identity.Species).Prototype, MapCoordinates.Nullspace);
            _entity.TryGetComponent<HumanoidAppearanceComponent>(x, out var appearance);
            _spawnedNullSpaceEntities.Add(x);

            _appearance.SetSkinColor(x,identity.SkinColor);
            appearance!.EyeColor = identity.EyeColor;
            _appearance.SetSex(x, identity.IdentitySex);
            appearance!.CustomBaseLayers = identity.CustomBaseLayers;
            appearance!.MarkingSet = identity.MarkingSet;
            _appearance.AddMarking();
            _entity.DirtyEntity(x);
            var child = new ChangelingTransformIdentityItem(identity, x);
            child.IdentityButton.OnPressed += args =>
            {
                OnIdentitySelect?.Invoke(identity.Identity);
            };
            IdentitiesGrid.AddChild(child);
        }
    }
}
