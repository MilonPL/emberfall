using Content.Client.UserInterface.Controls;
using Content.Shared.Changeling.Transform;
using Robust.Client.AutoGenerated;
using Robust.Client.GameObjects;
using Robust.Client.Graphics;
using Robust.Client.Player;
using Robust.Client.UserInterface;
using Robust.Client.UserInterface.XAML;
using Robust.Shared.Network;
using Robust.Shared.Prototypes;

namespace Content.Client.Changeling.Transform;

[GenerateTypedNameReferences]
public sealed partial class ChangelingTransformMenu : RadialMenu
{
    [Dependency] private readonly IClyde _clyde = default!;
    [Dependency] private readonly IEntityManager _entManager = default!;
    [Dependency] private readonly IPlayerManager _playerManager = default!;

    private EntityUid _player;

    public event Action<ChangelingTransformRadialMessage>? OnTransformMenuClicked;
    public ChangelingTransformMenu()
    {
        IoCManager.InjectDependencies(this);
        RobustXamlLoader.Load(this);

    }
    public void Owner(EntityUid owner)
    {
        _player = _playerManager.LocalEntity.GetValueOrDefault();

        if (!_entManager.EntityExists(_player))
        {
            Close();
            return;
        }
        UpdatePosition();
        RequestButtons();

    }

    private void RequestButtons()
    {
        if (_playerManager.LocalUser != null)
        {
            var ev = new ChangelingIdentityRequest((NetUserId)_playerManager.LocalUser);
            _entManager.EntityNetManager?.SendSystemNetworkMessage(ev);
        }


    }
    private void UpdatePosition()
    {
        if (!_entManager.TryGetComponent(_player, out TransformComponent? xform))
        {
            Close();
            return;
        }

        if (!xform.Coordinates.IsValid(_entManager))
        {
            Close();
            return;
        }

        var coords = _entManager.System<SpriteSystem>().GetSpriteScreenCoordinates((_player, null, xform));

        if (!coords.IsValid)
        {
            Close();
            return;
        }

        OpenScreenAt(coords.Position, _clyde);
    }
}
