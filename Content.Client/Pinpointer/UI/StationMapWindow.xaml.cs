using System.Numerics;
using Content.Client.UserInterface.Controls;
using Robust.Client.AutoGenerated;
using Robust.Client.UserInterface.XAML;
using Robust.Shared.Map;
using Robust.Client.UserInterface.Controls;
using Content.Shared.Pinpointer;
using System.Linq;

namespace Content.Client.Pinpointer.UI;

[GenerateTypedNameReferences]
public sealed partial class StationMapWindow : FancyWindow
{
    [Dependency] private readonly IEntityManager _entMan = default!;

    public StationMapWindow()
    {
        RobustXamlLoader.Load(this);
        IoCManager.InjectDependencies(this);

        FilterBar.OnTextEntered += (bar) => OnFilterChanged(bar.Text);
    }

    public void Set(string stationName, EntityUid? mapUid, EntityUid? trackedEntity)
    {
        NavMapScreen.MapUid = mapUid;

        if (trackedEntity != null)
            NavMapScreen.TrackedCoordinates.Add(new EntityCoordinates(trackedEntity.Value, Vector2.Zero), (true, Color.Cyan));

        if (!string.IsNullOrEmpty(stationName))
        {
            StationName.Text = stationName;
        }

        NavMapScreen.ForceNavMapUpdate();
        UpdateBeaconList(mapUid);
    }

    public void OnFilterChanged(string newFilter)
    {
        foreach (var child in BeaconButtons.Children)
        {
            if (child is not Button)
                continue;

            Button button = (child as Button)!;
            button.Visible = string.IsNullOrEmpty(newFilter) || button.Label.Text!.Contains(newFilter, StringComparison.OrdinalIgnoreCase);
        };
    }

    public void UpdateBeaconList(EntityUid? mapUid)
    {
        BeaconButtons.Children.Clear();

        if (!mapUid.HasValue)
            return;

        if (!_entMan.TryGetComponent<NavMapComponent>(mapUid, out var navMap))
            return;

        var beaconCompare = Comparer<SharedNavMapSystem.NavMapBeacon>.Create((a, b) =>
        {
            // Group by color
            var colorCompare = a.Color.ToArgb().CompareTo(b.Color.ToArgb());
            if (colorCompare != 0)
            {
                return colorCompare;
            }

            // If same color, sort by text
            return a.Text!.CompareTo(b.Text!);
        });

        foreach (var beacon in navMap.Beacons.Values.Order(beaconCompare))
        {
            var button = new Button()
            {
                HorizontalExpand = true,
            };
            button.Label.Text = beacon.Text;
            button.Label.FontColorOverride = beacon.Color;

            button.OnButtonUp += args =>
            {
                NavMapScreen.CenterToCoordinates(new EntityCoordinates(mapUid.Value, beacon.Position));
            };

            BeaconButtons.AddChild(button);
        }
    }
}