using Content.Client.UserInterface.Controls;
using Content.Shared.Telephone;
using Robust.Client.AutoGenerated;
using Robust.Client.GameObjects;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.XAML;
using Robust.Shared.Timing;

namespace Content.Client.Holopad;

[GenerateTypedNameReferences]
public sealed partial class HolopadWindow : FancyWindow
{
    [Dependency] private IEntityManager _entManager = default!;
    private readonly SpriteSystem _spriteSystem;
    [Dependency] private IGameTiming _gameTiming = default!;

    public event Action<NetEntity>? SendHolopadStartNewCallMessageAction;
    public event Action? SendHolopadAnswerCallMessageAction;
    public event Action? SendHolopadEndCallMessageAction;
    public event Action? SendHolopadStartBroadcastMessageAction;
    public event Action? SendHolopadActivateProjectorMessageAction;
    public event Action? SendHolopadRequestStationAiMessageAction;

    public HolopadWindow()
    {
        RobustXamlLoader.Load(this);
        IoCManager.InjectDependencies(this);

        _spriteSystem = _entManager.System<SpriteSystem>();

        AnswerCallButton.OnPressed += args => { OnHolopadAnswerCallMessage(); };
        EndCallButton.OnPressed += args => { OnHolopadEndCallMessage(); };
        StartBroadcastButton.OnPressed += args => { OnHolopadStartBroadcastMessage(); };
        ActivateProjectorButton.OnPressed += args => { OnHolopadActivateProjectorMessage(); };
        RequestStationAiButton.OnPressed += args => { OnHolopadRequestStationAiMessage(); };
    }

    public void UpdateUIState(TelephoneState state, Dictionary<NetEntity, string> holopads)
    {
        AnswerCallButton.Disabled = (state != TelephoneState.Ringing);
        EndCallButton.Disabled = (state == TelephoneState.Idle || state == TelephoneState.EndingCall);

        // Clear excess children from the contact list
        while (ContactsList.ChildCount > holopads.Count)
            ContactsList.RemoveChild(ContactsList.GetChild(ContactsList.ChildCount - 1));

        int index = 0;

        foreach (var (netEntity, label) in holopads)
        {
            if (index >= ContactsList.ChildCount)
            {
                var newContactButton = new HolopadContactButton();
                newContactButton.OnPressed += args => { OnSendHolopadStartNewCallMessage(newContactButton.NetEntity); };

                ContactsList.AddChild(newContactButton);
            }

            var child = ContactsList.GetChild(index);

            if (child is not HolopadContactButton)
                continue;

            var contactButton = (HolopadContactButton)child;
            contactButton.Disabled = state != TelephoneState.Idle;
            contactButton.UpdateValues(netEntity, label);

            index++;
        }
    }

    protected override void FrameUpdate(FrameEventArgs args)
    {

    }

    private sealed class HolopadContactButton : Button
    {
        public NetEntity NetEntity;

        public HolopadContactButton()
        {
            HorizontalExpand = true;
            SetHeight = 32;
            Margin = new Thickness(0f, 1f, 0f, 1f);
        }

        public void UpdateValues(NetEntity netEntity, string label)
        {
            NetEntity = netEntity;
            Text = label;
        }
    }

    private void OnSendHolopadStartNewCallMessage(NetEntity receiver)
    {
        SendHolopadStartNewCallMessageAction?.Invoke(receiver);
    }

    private void OnHolopadEndCallMessage()
    {
        SendHolopadEndCallMessageAction?.Invoke();
    }

    private void OnHolopadAnswerCallMessage()
    {
        SendHolopadAnswerCallMessageAction?.Invoke();
    }

    private void OnHolopadStartBroadcastMessage()
    {
        SendHolopadStartBroadcastMessageAction?.Invoke();
    }

    private void OnHolopadActivateProjectorMessage()
    {
        SendHolopadActivateProjectorMessageAction?.Invoke();
    }

    private void OnHolopadRequestStationAiMessage()
    {
        SendHolopadRequestStationAiMessageAction?.Invoke();
    }

    /*private int AlphabeticalSort(PowerMonitoringConsoleEntry x, PowerMonitoringConsoleEntry y)
    {
        if (x.MetaData?.EntityName == null)
            return -1;

        if (y.MetaData?.EntityName == null)
            return 1;

        return x.MetaData.Value.EntityName.CompareTo(y.MetaData.Value.EntityName);
    }*/
}
