using Content.Client.UserInterface.Controls;
using Content.Shared.Power;
using Robust.Client.AutoGenerated;
using Robust.Client.GameObjects;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.XAML;
using Robust.Shared.Timing;
using Robust.Shared.Utility;
using System.Linq;
using YamlDotNet.Core.Tokens;

namespace Content.Client.Holopad;

[GenerateTypedNameReferences]
public sealed partial class HolopadWindow : FancyWindow
{
    [Dependency] private IEntityManager _entManager = default!;
    private readonly SpriteSystem _spriteSystem;
    [Dependency] private IGameTiming _gameTiming = default!;

    public event Action<NetEntity, NetEntity>? SendHolopadMessageAction;

    public HolopadWindow()
    {
        RobustXamlLoader.Load(this);
        IoCManager.InjectDependencies(this);

        _spriteSystem = _entManager.System<SpriteSystem>();
    }

    public void UpdateUIState(Dictionary<NetEntity, string> holopads)
    {
        // Clear excess children from the contact list
        while (ContactsList.ChildCount > holopads.Count)
            ContactsList.RemoveChild(ContactsList.GetChild(ContactsList.ChildCount - 1));

        int index = 0;

        foreach (var (netEntity, label) in holopads)
        {
            if (index >= ContactsList.ChildCount)
            {
                var newContactButton = new HolopadContactButton();
                newContactButton.OnPressed += args => { OnSendHolopadMessage(newContactButton.NetEntity); };

                ContactsList.AddChild(newContactButton);
            }

            var child = ContactsList.GetChild(index);

            if (child is not HolopadContactButton)
                continue;

            var contactButton = (HolopadContactButton)child;
            contactButton.UpdateValues(netEntity, label);

            index++;
        }
    }

    protected override void FrameUpdate(FrameEventArgs args)
    {

    }

    private sealed class HolopadContactButton : Button
    {
        public NetEntity NetEntity;

        public HolopadContactButton()
        {
            HorizontalExpand = true;
            SetHeight = 32;
            Margin = new Thickness(0f, 1f, 0f, 1f);
        }

        public void UpdateValues(NetEntity netEntity, string label)
        {
            NetEntity = netEntity;
            Text = label;
        }
    }

    private void OnSendHolopadMessage(NetEntity netEntity)
    {
        SendHolopadMessageAction?.Invoke(netEntity, netEntity);
    }

    /*private int AlphabeticalSort(PowerMonitoringConsoleEntry x, PowerMonitoringConsoleEntry y)
    {
        if (x.MetaData?.EntityName == null)
            return -1;

        if (y.MetaData?.EntityName == null)
            return 1;

        return x.MetaData.Value.EntityName.CompareTo(y.MetaData.Value.EntityName);
    }*/
}
