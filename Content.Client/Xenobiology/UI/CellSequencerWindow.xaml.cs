using Content.Client.UserInterface.Controls;
using Content.Shared.Xenobiology;
using Content.Shared.Xenobiology.UI;
using Robust.Client.AutoGenerated;
using Robust.Client.UserInterface.XAML;
using Robust.Shared.Prototypes;
using Robust.Shared.Utility;

namespace Content.Client.Xenobiology.UI;

[GenerateTypedNameReferences]
public sealed partial class CellSequencerWindow : FancyWindow
{
    [Dependency] private readonly IPrototypeManager _prototype = default!;

    public event Action? OnSync;
    public event Action<Cell?>? OnAdd;
    public event Action<Cell?, bool>? OnRemove;
    public event Action<Cell?>? OnPrint;

    private Cell? _selectedCell;
    private CellSequencerEntryControl? _sequencerEntry;
    private int _material;

    public CellSequencerWindow()
    {
        RobustXamlLoader.Load(this);
        IoCManager.InjectDependencies(this);

        SyncButton.OnPressed += _ => OnSync?.Invoke();
        AddButton.OnPressed += _ => OnAdd?.Invoke(_selectedCell);
        RemoveButton.OnPressed += _ =>
        {
            OnRemove?.Invoke(_selectedCell, _sequencerEntry?.Remote ?? false);
            SelectedCellEntry(null);
        };
        ReplaceButton.OnPressed += _ => OnPrint?.Invoke(_selectedCell);
    }

    public void UpdateState(CellSequencerUiState sequencerUiState)
    {
        _material = sequencerUiState.Material;
        MaterialLabel.Text = Loc.GetString("cell-sequencer-menu-cell-material-label", ("material", _material));

        InsideCellContainer.RemoveAllChildren();
        foreach (var savedCell in sequencerUiState.InsideCells)
        {
            var entry = new CellSequencerEntryControl(savedCell, false);
            entry.OnSelect += SelectedCellEntry;
            InsideCellContainer.AddChild(entry);
        }

        RemoteCellContainer.RemoveAllChildren();
        foreach (var savedCell in sequencerUiState.RemoteCells)
        {
            var entry = new CellSequencerEntryControl(savedCell, true);
            entry.OnSelect += SelectedCellEntry;
            RemoteCellContainer.AddChild(entry);
        }
    }

    private void SelectedCellEntry(CellSequencerEntryControl? entry)
    {
        _sequencerEntry?.SetState(true);

        _selectedCell = entry?.Cell;
        _sequencerEntry = entry;
        _sequencerEntry?.SetState(false);

        var isRemote = false;
        if (_sequencerEntry is not null)
            isRemote = _sequencerEntry.Remote;

        var hasMaterial = false;
        if (_selectedCell is not null)
            hasMaterial = _material >= _selectedCell.Cost;

        RemoveButton.Disabled = _selectedCell is null;
        ReplaceButton.Disabled = !isRemote || !hasMaterial;

        NoSelectedLabel.Visible = _selectedCell is null;
        CellInfoContainer.Visible = _selectedCell is not null;

        if (_selectedCell is null)
            return;

        CellNameLabel.Text = Loc.GetString("cell-sequencer-menu-cell-name-label", ("name", _selectedCell.Name));
        var colorTitle = Loc.GetString("cell-sequencer-menu-cell-color-label", ("color", _selectedCell.Color.ToHex()));
        if (!FormattedMessage.TryFromMarkup(colorTitle, out var colorMarkup))
        {
            CellColorLabel.SetMessage(colorTitle);
            return;
        }
        CellColorLabel.SetMessage(colorMarkup);
        CellStabilityLabel.Text = Loc.GetString("cell-sequencer-menu-cell-stability-label", ("stability", _selectedCell.Stability * 100));
        CellRemoteLabel.Text = Loc.GetString("cell-sequencer-menu-cell-remote-label", ("remote", _sequencerEntry?.Remote.ToString() ?? "???"));
        CellCostLabel.Text = Loc.GetString("cell-sequencer-menu-cell-cost-label", ("cost", _selectedCell.Cost));

        var message = string.Empty;
        foreach (var modifierId in _selectedCell.Modifiers)
        {
            var modifier = _prototype.Index(modifierId);
            message += $"{Loc.GetString("cell-sequencer-menu-cell-modifier-message", ("name", Loc.GetString(modifier.Name)), ("color", modifier.Color.ToHex()))}\r\n";
        }

        if (!FormattedMessage.TryFromMarkup(message, out var markup))
        {
            CellModifiersText.SetMessage(message);
            return;
        }

        CellModifiersText.SetMessage(markup);
    }
}
