using Content.Client.Atmos.Consoles;
using Content.Client.Message;
using Content.Client.Pinpointer.UI;
using Content.Client.Stylesheets;
using Content.Client.UserInterface.Controls;
using Content.Shared.Alert;
using Content.Shared.Atmos.Components;
using Content.Shared.Atmos.Monitor;
using Robust.Client.AutoGenerated;
using Robust.Client.GameObjects;
using Robust.Client.UserInterface;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.XAML;
using Robust.Shared.Map;
using Robust.Shared.Timing;
using Robust.Shared.Utility;
using System.Diagnostics.CodeAnalysis;
using System.Linq;

namespace Content.Client.Atmos.Console;

[GenerateTypedNameReferences]
public sealed partial class AtmosMonitoringConsoleWindow : FancyWindow
{
    private readonly IEntityManager _entManager;
    private readonly SpriteSystem _spriteSystem;

    private EntityUid? _owner;
    private NetEntity? _focusEntity;
    private int? _focusNetId;

    private bool _autoScrollActive = false;
    private bool _autoScrollAwaitsUpdate = false;

    private const float SilencingDuration = 2.5f;

    public AtmosMonitoringConsoleWindow(AtmosMonitoringConsoleBoundUserInterface userInterface, EntityUid? owner)
    {
        RobustXamlLoader.Load(this);
        _entManager = IoCManager.Resolve<IEntityManager>();
        _spriteSystem = _entManager.System<SpriteSystem>();

        // Pass the owner to nav map
        _owner = owner;
        NavMap.Owner = _owner;

        // Set nav map grid uid
        var stationName = Loc.GetString("atmos-monitoring-window-unknown-location");

        if (_entManager.TryGetComponent<TransformComponent>(owner, out var xform))
        {
            NavMap.MapUid = xform.GridUid;

            // Assign station name      
            if (_entManager.TryGetComponent<MetaDataComponent>(xform.GridUid, out var stationMetaData))
                stationName = stationMetaData.EntityName;

            var msg = new FormattedMessage();
            msg.TryAddMarkup(Loc.GetString("atmos-monitoring-window-station-name", ("stationName", stationName)), out _);

            StationName.SetMessage(msg);
        }

        else
        {
            StationName.SetMessage(stationName);
            NavMap.Visible = false;
        }

        // Set trackable entity selected action
        NavMap.TrackedEntitySelectedAction += SetTrackedEntityFromNavMap;

        // Update nav map
        NavMap.ForceNavMapUpdate();

        // Set tab container headers
        MasterTabContainer.SetTabTitle(0, Loc.GetString("atmos-monitoring-window-tab-networks"));

        // Set UI toggles
        ShowPipeNetwork.OnToggled += _ => OnShowPipeNetworkToggled();
        ShowGasPipeSensors.OnToggled += _ => OnShowGasPipeSensors();
    }

    #region Toggle handling

    private void OnShowPipeNetworkToggled()
    {
        if (_owner == null)
            return;

        if (!_entManager.TryGetComponent<AtmosMonitoringConsoleComponent>(_owner.Value, out var console))
            return;

        NavMap.ShowPipeNetwork = ShowPipeNetwork.Pressed;

        foreach (var (netEnt, device) in console.AtmosDevices)
        {
            if (device.Group == AtmosMonitoringConsoleGroup.GasPipeSensor)
                continue;

            if (ShowPipeNetwork.Pressed)
                AddTrackedEntityToNavMap(device);

            else
                NavMap.TrackedEntities.Remove(netEnt);
        }
    }

    private void OnShowGasPipeSensors()
    {
        if (_owner == null)
            return;

        if (!_entManager.TryGetComponent<AtmosMonitoringConsoleComponent>(_owner.Value, out var console))
            return;

        foreach (var (netEnt, device) in console.AtmosDevices)
        {
            if (device.Group != AtmosMonitoringConsoleGroup.GasPipeSensor)
                return;

            if (ShowGasPipeSensors.Pressed)
                AddTrackedEntityToNavMap(device);

            else
                NavMap.TrackedEntities.Remove(netEnt);
        }
    }

    #endregion

    public void UpdateUI
        (EntityCoordinates? consoleCoords,
        AtmosMonitoringConsoleEntry[] atmosNetworks)
    {
        if (_owner == null)
            return;

        if (!_entManager.TryGetComponent<AtmosMonitoringConsoleComponent>(_owner.Value, out var console))
            return;

        // Reset nav map values
        NavMap.TrackedCoordinates.Clear();
        NavMap.TrackedEntities.Clear();

        if (_focusEntity != null && !console.AtmosDevices.Any(x => x.Key == _focusEntity))
            ClearFocus();

        // Add tracked entities to the nav map
        if (NavMap.Visible)
        {
            foreach (var (netEnt, device) in console.AtmosDevices)
            {
                // Update the focus network ID, incase it has changed
                if (_focusEntity == netEnt)
                    SetFocus(netEnt, device.NetId);

                // Skip network devices if the toggled is off
                if (!ShowPipeNetwork.Pressed && device.Group != AtmosMonitoringConsoleGroup.GasPipeSensor)
                    continue;

                // Skip gas pipe sensors if the toggle is off
                if (!ShowGasPipeSensors.Pressed && device.Group == AtmosMonitoringConsoleGroup.GasPipeSensor)
                    continue;

                AddTrackedEntityToNavMap(device);
            }
        }

        // Show the monitor location
        var consoleUid = _entManager.GetNetEntity(_owner);

        if (consoleCoords != null && consoleUid != null)
        {
            var texture = _spriteSystem.Frame0(new SpriteSpecifier.Texture(new ResPath("/Textures/Interface/NavMap/beveled_circle.png")));
            var blip = new NavMapBlip(consoleCoords.Value, texture, Color.Cyan, true, false);
            NavMap.TrackedEntities[consoleUid.Value] = blip;
        }

        // Update the nav map
        NavMap.ForceNavMapUpdate();

        // Clear excess children from the tables
        while (AtmosNetworksTable.ChildCount > atmosNetworks.Length)
            AtmosNetworksTable.RemoveChild(AtmosNetworksTable.GetChild(AtmosNetworksTable.ChildCount - 1));

        // Update all entries in each table
        for (int index = 0; index < atmosNetworks.Length; index++)
        {
            var entry = atmosNetworks.ElementAt(index);
            UpdateUIEntry(entry, index, AtmosNetworksTable, console);
        }

        // Auto-scroll re-enable
        if (_autoScrollAwaitsUpdate)
        {
            _autoScrollActive = true;
            _autoScrollAwaitsUpdate = false;
        }
    }

    private void AddTrackedEntityToNavMap(AtmosDeviceNavMapData metaData)
    {
        var data = GetBlipTexture(metaData.Group, metaData.Direction);

        if (data == null)
            return;

        var texture = data.Value.Item1;
        var color = (metaData.Color != null) ? metaData.Color * data.Value.Item2 : data.Value.Item2;
        var coords = _entManager.GetCoordinates(metaData.NetCoordinates);

        if (color == null)
            color = Color.White;

        if (_focusNetId != null && metaData.NetId != _focusNetId)
        {
            color *= Color.DimGray;
        }

        var selectable = metaData.Group == AtmosMonitoringConsoleGroup.GasPipeSensor;
        var blip = new NavMapBlip(coords, _spriteSystem.Frame0(texture), color.Value, _focusEntity == metaData.NetEntity, selectable, 0.6667f);

        NavMap.TrackedEntities[metaData.NetEntity] = blip;
    }

    private void UpdateUIEntry(AtmosMonitoringConsoleEntry entry, int index, Control table, AtmosMonitoringConsoleComponent console)
    {
        // Make new UI entry if required
        if (index >= table.ChildCount)
        {
            var newEntryContainer = new AtmosMonitoringEntryContainer(entry.NetEntity, entry.NetId, _entManager.GetCoordinates(entry.Coordinates));

            // On click
            newEntryContainer.FocusButton.OnButtonUp += args =>
            {
                if (_focusEntity == newEntryContainer.NetEntity)
                {
                    ClearFocus();
                }

                else
                {
                    SetFocus(newEntryContainer.NetEntity, newEntryContainer.NetId);

                    if (newEntryContainer.Coordinates != null)
                        NavMap.CenterToCoordinates(newEntryContainer.Coordinates.Value);
                }

                // Update affected UI elements across all tables
                UpdateConsoleTable(console, AtmosNetworksTable, _focusEntity);
            };

            // Add the entry to the current table
            table.AddChild(newEntryContainer);
        }

        // Update values and UI elements
        var tableChild = table.GetChild(index);

        if (tableChild is not AtmosMonitoringEntryContainer)
        {
            table.RemoveChild(tableChild);
            UpdateUIEntry(entry, index, table, console);

            return;
        }

        var entryContainer = (AtmosMonitoringEntryContainer)tableChild;
        entryContainer.UpdateEntry(entry, entry.NetEntity == _focusEntity);
    }

    private void UpdateConsoleTable(AtmosMonitoringConsoleComponent console, Control table, NetEntity? currTrackedEntity)
    {
        foreach (var tableChild in table.Children)
        {
            if (tableChild is not AtmosAlarmEntryContainer)
                continue;

            var entryContainer = (AtmosAlarmEntryContainer)tableChild;

            if (entryContainer.NetEntity != currTrackedEntity)
                entryContainer.RemoveAsFocus();

            else if (entryContainer.NetEntity == currTrackedEntity)
                entryContainer.SetAsFocus();
        }
    }

    private void SetTrackedEntityFromNavMap(NetEntity? focusEntity)
    {
        if (focusEntity == null)
            return;

        if (!_entManager.TryGetComponent<AtmosMonitoringConsoleComponent>(_owner, out var console))
            return;

        foreach (var (netEnt, device) in console.AtmosDevices)
        {
            if (netEnt != focusEntity)
                continue;

            if (device.Group != AtmosMonitoringConsoleGroup.GasPipeSensor)
                return;

            // Set new focus
            SetFocus(focusEntity.Value, device.NetId);

            // Get the scroll position of the selected entity on the selected button the UI
            ActivateAutoScrollToFocus();
        }
    }

    protected override void FrameUpdate(FrameEventArgs args)
    {
        AutoScrollToFocus();
    }

    private void ActivateAutoScrollToFocus()
    {
        _autoScrollActive = false;
        _autoScrollAwaitsUpdate = true;
    }

    private void AutoScrollToFocus()
    {
        if (!_autoScrollActive)
            return;

        var scroll = AtmosNetworksTable.Parent as ScrollContainer;
        if (scroll == null)
            return;

        if (!TryGetVerticalScrollbar(scroll, out var vScrollbar))
            return;

        if (!TryGetNextScrollPosition(out float? nextScrollPosition))
            return;

        vScrollbar.ValueTarget = nextScrollPosition.Value;

        if (MathHelper.CloseToPercent(vScrollbar.Value, vScrollbar.ValueTarget))
            _autoScrollActive = false;
    }

    private bool TryGetVerticalScrollbar(ScrollContainer scroll, [NotNullWhen(true)] out VScrollBar? vScrollBar)
    {
        vScrollBar = null;

        foreach (var child in scroll.Children)
        {
            if (child is not VScrollBar)
                continue;

            var castChild = child as VScrollBar;

            if (castChild != null)
            {
                vScrollBar = castChild;
                return true;
            }
        }

        return false;
    }

    private bool TryGetNextScrollPosition([NotNullWhen(true)] out float? nextScrollPosition)
    {
        nextScrollPosition = null;

        var scroll = AtmosNetworksTable.Parent as ScrollContainer;
        if (scroll == null)
            return false;

        var container = scroll.Children.ElementAt(0) as BoxContainer;
        if (container == null || container.Children.Count() == 0)
            return false;

        // Exit if the heights of the children haven't been initialized yet
        if (!container.Children.Any(x => x.Height > 0))
            return false;

        nextScrollPosition = 0;

        foreach (var control in container.Children)
        {
            if (control == null || control is not AtmosMonitoringEntryContainer)
                continue;

            if (((AtmosMonitoringEntryContainer)control).NetEntity == _focusEntity)
                return true;

            nextScrollPosition += control.Height;
        }

        // Failed to find control
        nextScrollPosition = null;

        return false;
    }

    private void SetFocus(NetEntity focusEntity, int focusNetId)
    {
        _focusEntity = focusEntity;
        _focusNetId = focusNetId;
        NavMap.FocusNetId = focusNetId;
    }

    private void ClearFocus()
    {
        _focusEntity = null;
        _focusNetId = null;
        NavMap.FocusNetId = null;
    }

    private (SpriteSpecifier.Texture, Color)? GetBlipTexture(AtmosMonitoringConsoleGroup group, Direction? direction = null)
    {
        (SpriteSpecifier.Texture, Color)? output = null;

        switch (group)
        {
            case AtmosMonitoringConsoleGroup.GasPipeSensor:
                output = (new SpriteSpecifier.Texture(new ResPath("/Textures/Interface/NavMap/beveled_star.png")), new Color(255, 205, 0));
                break;

            case AtmosMonitoringConsoleGroup.GasPump:
            case AtmosMonitoringConsoleGroup.GasMixer:
            case AtmosMonitoringConsoleGroup.GasFilter:
                switch (direction)
                {
                    case Direction.North:
                        output = (new SpriteSpecifier.Texture(new ResPath("/Textures/Interface/AtmosMonitoring/pump_north.png")), Color.LightGray); break;
                    case Direction.South:
                        output = (new SpriteSpecifier.Texture(new ResPath("/Textures/Interface/AtmosMonitoring/pump_south.png")), Color.LightGray); break;
                    case Direction.East:
                        output = (new SpriteSpecifier.Texture(new ResPath("/Textures/Interface/AtmosMonitoring/pump_east.png")), Color.LightGray); break;
                    default:
                        output = (new SpriteSpecifier.Texture(new ResPath("/Textures/Interface/AtmosMonitoring/pump_west.png")), Color.LightGray); break;
                }; break;
            case AtmosMonitoringConsoleGroup.GasValve:
                switch (direction)
                {
                    case Direction.North:
                    case Direction.South:
                        output = (new SpriteSpecifier.Texture(new ResPath("/Textures/Interface/AtmosMonitoring/valve_north_south.png")), Color.LightGray); break;
                    case Direction.East:
                    default:
                        output = (new SpriteSpecifier.Texture(new ResPath("/Textures/Interface/AtmosMonitoring/valve_east_west.png")), Color.LightGray); break;
                }; break;
            case AtmosMonitoringConsoleGroup.GasInlet:
                output = (new SpriteSpecifier.Texture(new ResPath("/Textures/Interface/NavMap/beveled_circle.png")), Color.LightGray); break;
            case AtmosMonitoringConsoleGroup.GasOutlet:
            case AtmosMonitoringConsoleGroup.GasOpening:
                output = (new SpriteSpecifier.Texture(new ResPath("/Textures/Interface/NavMap/beveled_square.png")), Color.LightGray); break;
            case AtmosMonitoringConsoleGroup.Thermoregulator:
                output = (new SpriteSpecifier.Texture(new ResPath("/Textures/Interface/NavMap/beveled_hexagon.png")), Color.LightGray); break;
        }

        return output;
    }
}
