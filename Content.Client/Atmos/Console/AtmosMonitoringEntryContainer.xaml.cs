using Content.Client.Stylesheets;
using Content.Shared.Atmos;
using Content.Shared.Atmos.Components;
using Content.Shared.Atmos.Monitor;
using Content.Shared.FixedPoint;
using Content.Shared.Temperature;
using Robust.Client.AutoGenerated;
using Robust.Client.Graphics;
using Robust.Client.ResourceManagement;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.XAML;
using Robust.Shared.Map;
using System.Linq;

namespace Content.Client.Atmos.Console;

[GenerateTypedNameReferences]
public sealed partial class AtmosMonitoringEntryContainer : BoxContainer
{
    public NetEntity NetEntity;
    public int NetId;
    public EntityCoordinates? Coordinates;

    private IResourceCache _cache;

    // This needs to be moved out and shared with the atmos alerts computer
    private Dictionary<Gas, string> _gasShorthands = new Dictionary<Gas, string>()
    {
        [Gas.Ammonia] = "NH₃",
        [Gas.CarbonDioxide] = "CO₂",
        [Gas.Frezon] = "F",
        [Gas.Nitrogen] = "N₂",
        [Gas.NitrousOxide] = "N₂O",
        [Gas.Oxygen] = "O₂",
        [Gas.Plasma] = "P",
        [Gas.Tritium] = "T",
        [Gas.WaterVapor] = "H₂O",
    };

    public AtmosMonitoringEntryContainer(NetEntity uid, int netId, EntityCoordinates? coordinates)
    {
        RobustXamlLoader.Load(this);

        _cache = IoCManager.Resolve<IResourceCache>();

        NetEntity = uid;
        NetId = netId;
        Coordinates = coordinates;

        // Load fonts
        var headerFont = new VectorFont(_cache.GetResource<FontResource>("/Fonts/NotoSans/NotoSans-Bold.ttf"), 11);
        var normalFont = new VectorFont(_cache.GetResource<FontResource>("/Fonts/NotoSansDisplay/NotoSansDisplay-Regular.ttf"), 11);
        var smallFont = new VectorFont(_cache.GetResource<FontResource>("/Fonts/NotoSans/NotoSans-Regular.ttf"), 10);

        // Set fonts
        TemperatureHeaderLabel.FontOverride = headerFont;
        PressureHeaderLabel.FontOverride = headerFont;
        TotalMolHeaderLabel.FontOverride = headerFont;
        GasesHeaderLabel.FontOverride = headerFont;

        TemperatureLabel.FontOverride = normalFont;
        PressureLabel.FontOverride = normalFont;
        TotalMolLabel.FontOverride = normalFont;

        NoDataLabel.FontOverride = headerFont;
    }

    public void UpdateEntry(AtmosMonitoringConsoleEntry entry, bool isFocus)
    {
        // Load fonts
        var normalFont = new VectorFont(_cache.GetResource<FontResource>("/Fonts/NotoSansDisplay/NotoSansDisplay-Regular.ttf"), 11);

        // Update name and network ID
        if (!string.IsNullOrEmpty(entry.Address))
            NetworkNameLabel.Text = Loc.GetString("atmos-alerts-window-alarm-label", ("name", entry.EntityName), ("address", entry.Address));

        else
            NetworkNameLabel.Text = Loc.GetString(entry.EntityName);

        NetId = entry.NetId;

        // Focus updates
        if (isFocus)
            SetAsFocus();
        else
            RemoveAsFocus();

        // Check if powered
        if (!entry.IsPowered)
        {
            MainDataContainer.Visible = false;
            NoDataLabel.Visible = true;

            return;
        }

        // Set container visibility
        MainDataContainer.Visible = true;
        NoDataLabel.Visible = false;

        // Update temperature
        var tempK = (FixedPoint2)entry.TemperatureData;
        var tempC = (FixedPoint2)TemperatureHelpers.KelvinToCelsius(tempK.Float());

        TemperatureLabel.Text = Loc.GetString("atmos-alerts-window-temperature-value", ("valueInC", tempC), ("valueInK", tempK));

        // Update pressure
        PressureLabel.Text = Loc.GetString("atmos-alerts-window-pressure-value", ("value", (FixedPoint2)entry.PressureData));

        // Update total mol
        TotalMolLabel.Text = Loc.GetString("atmos-alerts-window-total-mol-value", ("value", (FixedPoint2)entry.PressureData));

        // Update other present gases
        GasGridContainer.RemoveAllChildren();

        if (entry.GasData.Count() == 0)
        {
            // No gases
            var gasLabel = new Label()
            {
                Text = Loc.GetString("atmos-alerts-window-other-gases-value-nil"),
                FontOverride = normalFont,
                FontColorOverride = StyleNano.DisabledFore,
                HorizontalAlignment = HAlignment.Center,
                VerticalAlignment = VAlignment.Center,
                HorizontalExpand = true,
                Margin = new Thickness(0, 2, 0, 0),
                SetHeight = 24f,
            };

            GasGridContainer.AddChild(gasLabel);
        }

        else
        {
            // Add an entry for each gas
            foreach (var (gas, percent) in entry.GasData)
            {
                var gasPercent = (FixedPoint2)0f;
                gasPercent = percent * 100f;

                if (!_gasShorthands.TryGetValue(gas, out var gasShorthand))
                    gasShorthand = "X";

                var gasLabel = new Label()
                {
                    Text = Loc.GetString("atmos-alerts-window-other-gases-value", ("shorthand", gasShorthand), ("value", gasPercent)),
                    FontOverride = normalFont,
                    HorizontalAlignment = HAlignment.Center,
                    VerticalAlignment = VAlignment.Center,
                    HorizontalExpand = true,
                    Margin = new Thickness(0, 2, 0, 0),
                    SetHeight = 24f,
                };

                GasGridContainer.AddChild(gasLabel);
            }
        }
    }

    public void SetAsFocus()
    {
        FocusButton.AddStyleClass(StyleNano.StyleClassButtonColorGreen);
        ArrowTexture.TexturePath = "/Textures/Interface/Nano/inverted_triangle.svg.png";
        FocusContainer.Visible = true;
    }

    public void RemoveAsFocus()
    {
        FocusButton.RemoveStyleClass(StyleNano.StyleClassButtonColorGreen);
        ArrowTexture.TexturePath = "/Textures/Interface/Nano/triangle_right.png";
        FocusContainer.Visible = false;
    }
}
