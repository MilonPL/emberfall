using Content.Shared.Atmos.Monitor.Components;
using Content.Shared.Atmos.Piping.Unary.Components;
using Robust.Client.AutoGenerated;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.XAML;

namespace Content.Client.Atmos.Monitor.UI.Widgets;

[GenerateTypedNameReferences]
public sealed partial class PumpControl : BoxContainer
{
    private GasVentPumpData _data;

    public event Action<string, IAtmosDeviceData>? PumpDataChanged;
	public event Action<IAtmosDeviceData>? PumpDataCopied;

    private CheckBox Enabled => CEnableDevice;
    private CollapsibleHeading AddressLabel => CAddress;
    private OptionButton PumpDirection => CPumpDirection;
    private OptionButton PressureCheck => CPressureCheck;
    private FloatSpinBox ExternalBound => CExternalBound;
    private FloatSpinBox InternalBound => CInternalBound;
	private Button CopySettings => CCopySettings;

    public PumpControl(GasVentPumpData data, string address)
    {
        RobustXamlLoader.Load(this);

        Name = address;

        _data = data;
        var addressName = address;

        AddressLabel.Title = Loc.GetString("air-alarm-ui-atmos-net-device-label", ("address", $"{address}"));

        Enabled.Pressed = data.Enabled;
        Enabled.OnToggled += _ =>
        {
            _data.Enabled = Enabled.Pressed;
            PumpDataChanged?.Invoke(addressName, _data);
        };

        InternalBound.Value = _data.InternalPressureBound;
        InternalBound.OnValueChanged += _ =>
        {
            _data.InternalPressureBound = InternalBound.Value;
            PumpDataChanged?.Invoke(addressName, _data);
        };
        InternalBound.IsValid += value => value >= 0;

        ExternalBound.Value = _data.ExternalPressureBound;
        ExternalBound.OnValueChanged += _ =>
        {
            _data.ExternalPressureBound = ExternalBound.Value;
            PumpDataChanged?.Invoke(addressName, _data);
        };
        ExternalBound.IsValid += value => value >= 0;

        foreach (var value in Enum.GetValues<VentPumpDirection>())
        {
            PumpDirection.AddItem(Loc.GetString($"{value}"), (int) value);
        }

        PumpDirection.SelectId((int) _data.PumpDirection);
        PumpDirection.OnItemSelected += args =>
        {
            PumpDirection.SelectId(args.Id);
            _data.PumpDirection = (VentPumpDirection) args.Id;
            PumpDataChanged?.Invoke(addressName, _data);
        };

        foreach (var value in Enum.GetValues<VentPressureBound>())
        {
            PressureCheck.AddItem(Loc.GetString($"{value}"), (int) value);
        }

        PressureCheck.SelectId((int) _data.PressureChecks);
        PressureCheck.OnItemSelected += args =>
        {
            PressureCheck.SelectId(args.Id);
            _data.PressureChecks = (VentPressureBound) args.Id;
            PumpDataChanged?.Invoke(addressName, _data);
        };

		CopySettings.OnPressed += _ =>
		{
			PumpDataCopied?.Invoke(_data);
		};
    }

    public void ChangeData(GasVentPumpData data)
    {
        _data.Enabled = data.Enabled;
        Enabled.Pressed = _data.Enabled;

        _data.PumpDirection = data.PumpDirection;
        PumpDirection.SelectId((int) _data.PumpDirection);

        _data.PressureChecks = data.PressureChecks;
        PressureCheck.SelectId((int) _data.PressureChecks);

        _data.ExternalPressureBound = data.ExternalPressureBound;
        ExternalBound.Value = _data.ExternalPressureBound;

        _data.InternalPressureBound = data.InternalPressureBound;
        InternalBound.Value = _data.InternalPressureBound;
    }
}
