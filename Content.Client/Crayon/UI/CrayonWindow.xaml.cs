using System.Collections.Generic;
using System.Linq;
using Content.Client.Stylesheets;
using Content.Shared.Crayon;
using Content.Shared.Decals;
using Robust.Client.AutoGenerated;
using Robust.Client.Graphics;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.CustomControls;
using Robust.Client.UserInterface.XAML;
using Robust.Client.Utility;
using Robust.Shared.Graphics;
using Robust.Shared.Maths;
using Robust.Shared.Utility;
using static Robust.Client.UserInterface.Controls.BaseButton;

namespace Content.Client.Crayon.UI
{
    [GenerateTypedNameReferences]
    public sealed partial class CrayonWindow : DefaultWindow
    {
        private Dictionary<string, List<(string Name, Texture Texture)>>? _decals;
        private string? _selected;
        private Color _color;

        public event Action<Color>? OnColorSelected;
        public event Action<string>? OnSelected;

        public CrayonWindow()
        {
            RobustXamlLoader.Load(this);

            Search.OnTextChanged += _ => RefreshList();
            ColorSelector.OnColorChanged += SelectColor;
        }

        private void SelectColor(Color color)
        {
            _color = color;

            OnColorSelected?.Invoke(color);
            RefreshList();
        }

        private void RefreshList()
        {
            // Clear
            Grids.DisposeAllChildren();

            if (_decals == null)
                return;

            var filter = Search.Text;

            var names = _decals.Keys.ToList();
            names.Sort((a, b) => a == "random" ? 1 : b == "random" ? -1 : a.CompareTo(b));

            foreach (var categoryName in names)
            {
                var category = _decals[categoryName].Where(d => categoryName.Contains(filter) || d.Name.Contains(filter)).ToList();

                if (category.Count == 0)
                    continue;

                var label = new Label
                {
                    Text = Loc.GetString("crayon-category-" + categoryName)
                };

                var grid = new GridContainer
                {
                    Columns = 6,
                    Margin = new Thickness(0, 0, 0, 16)
                };

                Grids.AddChild(label);
                Grids.AddChild(grid);

                foreach (var (name, texture) in category)
                {
                    var button = new TextureButton()
                    {
                        TextureNormal = texture,
                        Name = name,
                        ToolTip = name,
                        Modulate = _color,
                        Scale = new System.Numerics.Vector2(2, 2)
                    };
                    button.OnPressed += ButtonOnPressed;
                    if (_selected == name)
                    {
                        var panelContainer = new PanelContainer()
                        {
                            PanelOverride = new StyleBoxFlat()
                            {
                                BackgroundColor = StyleNano.ButtonColorDefault,
                            },
                            Children =
                            {
                                button,
                            },
                        };
                        grid.AddChild(panelContainer);
                    }
                    else
                    {
                        grid.AddChild(button);
                    }
                }
            }
        }

        private void ButtonOnPressed(ButtonEventArgs obj)
        {
            if (obj.Button.Name == null) return;

            _selected = obj.Button.Name;
            OnSelected?.Invoke(_selected);
            RefreshList();
        }

        public void UpdateState(CrayonBoundUserInterfaceState state)
        {
            _selected = state.Selected;
            ColorSelector.Visible = state.SelectableColor;
            _color = state.Color;

            if (ColorSelector.Visible)
            {
                ColorSelector.Color = state.Color;
            }

            RefreshList();
        }

        public void Populate(List<DecalPrototype> prototypes)
        {
            _decals = [];

            prototypes.Sort((a, b) => a.ID.CompareTo(b.ID));

            foreach (var decalPrototype in prototypes)
            {
                var category = "random";
                if (decalPrototype.Tags.Count > 1 && decalPrototype.Tags[1].StartsWith("crayon-"))
                    category = decalPrototype.Tags[1].Replace("crayon-", "");
                var list = _decals.GetOrNew(category);
                list.Add((decalPrototype.ID, decalPrototype.Sprite.Frame0()));
            }

            RefreshList();
        }
    }
}
