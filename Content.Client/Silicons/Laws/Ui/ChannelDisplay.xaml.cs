using Content.Client.Chat.Managers;
using Content.Client.Message;
using Content.Shared.Chat;
using Content.Shared.Radio;
using Content.Shared.Silicons.Laws;
using Content.Shared.Silicons.Laws.Components;
using Content.Shared.Speech;
using Robust.Client.AutoGenerated;
using Robust.Client.UserInterface;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.XAML;
using Robust.Shared.Prototypes;
using Robust.Shared.Utility;

namespace Content.Client.Silicons.Laws.Ui;

[GenerateTypedNameReferences]
public sealed partial class ChannelDisplay : Control
{
    [Dependency] private readonly IPrototypeManager _prototypeManager = default!;
    [Dependency] private readonly IChatManager _chatManager = default!;
    [Dependency] private readonly EntityManager _entityManager = default!;
    private ISawmill _sawmill = default!;
    public event Action<string>? LawChannelSelected;
    private string _lawChannel = "Local";

    private SiliconLawMenu? _parent;

    private EntityUid? _uid;
    private SiliconLawBuiState? _state;
    public ChannelDisplay(SiliconLawMenu parentMenu, EntityUid? uid = null, HashSet<string>? radioChannels = null, SiliconLawBuiState? state = null)
    {
        // Refresh any missing references when the display is created.
        if (parentMenu != null)
            _parent = parentMenu;
        if (uid != null)
            _uid = uid;
        if (state != null)
            _state = state;
        if (_uid != null)
            _sawmill.Debug("uid is not null. It has been set.");
        if (_state != null)
            _sawmill.Debug("State is not null. It has been set.");
        RobustXamlLoader.Load(this);
        IoCManager.InjectDependencies(this);
        _sawmill = Logger.GetSawmill("silicon_debugging");

        LawChannelSelector.OnItemSelected += SelectLawChannel;

        // If you can't talk, you can't state your laws...
        if (uid != null)
        {
            if (!_entityManager.TryGetComponent<SpeechComponent>(uid, out var speech) || speech.SpeechSounds is null)
                return;
        }
        if (radioChannels != null)
            AddChannels(radioChannels, null);
    }

    private void SelectLawChannel(OptionButton.ItemSelectedEventArgs args)
    {
        _lawChannel = (string)args.Button.GetItemMetadata(args.Id)!;
        LawChannelSelected?.Invoke((string)args.Button.GetItemMetadata(args.Id)!);
        _sawmill.Debug($"The selected channel is {_lawChannel}");
        if (_uid != null)
            _sawmill.Debug("uid is not null");
        else
            _sawmill.Debug("uid is null");
        if (_state != null)
            _sawmill.Debug("State is not null");
        else
            _sawmill.Debug("State is null");
        if (_state != null && _uid != null && _parent != null)
        {
            _state.SelectedChannel = _lawChannel;
            _sawmill.Debug($"Setting channel for law to {_lawChannel}");
            // Update the parent LawMenu so we populate the channels when the rest of the UI is ready.
            _parent.Update((EntityUid)_uid, _state);
        }
        LawChannelSelector.Select(args.Id);
    }

    public void Update(EntityUid uid, SiliconLawBuiState? state = null)
    {

        if (!_entityManager.TryGetComponent<SpeechComponent>(uid, out var speech) || speech.SpeechSounds is null)
            return;

        if (state != null)
        {
            // If the state wasn't set, set it now
            _state = state;
        }
        if (_uid == null)
            _uid = uid;
        if (_state != null && _state.RadioChannels != null)
            AddChannels(_state.RadioChannels, _state.SelectedChannel);
    }

    public void AddChannels(HashSet<string> radioChannels, string? selectedChannel)
    {
        // Prevent duplicate channels in the list
        LawChannelSelector.Clear();
        if (radioChannels == null)
            return;
        foreach (var radioChannel in radioChannels)
        {
            if (!_prototypeManager.TryIndex<RadioChannelPrototype>(radioChannel, out var radioChannelProto))
                continue;
            _sawmill.Debug($"Adding channel {radioChannel} to dropdown.");
            LawChannelSelector.AddItem(radioChannel);
            LawChannelSelector.SetItemMetadata(LawChannelSelector.ItemCount - 1, radioChannel);
        }
        // We should always have access to local
        LawChannelSelector.AddItem("Local");
        LawChannelSelector.SetItemMetadata(LawChannelSelector.ItemCount - 1, "Local");
        LawChannelSelector.Select(LawChannelSelector.ItemCount - 1);
    }
}
