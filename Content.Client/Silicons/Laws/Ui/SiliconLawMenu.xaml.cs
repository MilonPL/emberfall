using Content.Client.UserInterface.Controls;
using Content.Shared.Silicons.Laws.Components;
using Robust.Client.AutoGenerated;
using Robust.Client.UserInterface.XAML;
using Serilog;

namespace Content.Client.Silicons.Laws.Ui;

[GenerateTypedNameReferences]
public sealed partial class SiliconLawMenu : FancyWindow
{
    private ISawmill _sawmill = default!;
    public SiliconLawMenu()
    {
        RobustXamlLoader.Load(this);
        IoCManager.InjectDependencies(this);
        _sawmill = Logger.GetSawmill("silicon_debugging");
        _sawmill.Debug($"Starting new Law UI");
        // Pass this into the display so we can access the menu's Update() function, and have a stateful reference to the containing parent
        var channelControl = new ChannelDisplay(this);
        LawDisplayHeader.AddChild(channelControl);
    }

    public void Update(EntityUid uid, SiliconLawBuiState state)
    {
        state.Laws.Sort();

        foreach (var control in LawDisplayHeader.Children)
        {
            if (control is ChannelDisplay)
            {
                _sawmill.Debug($"Updating radio channels for law DDL. Selected channel is {state.SelectedChannel}");
                // Pass along the uid and current state
                ((ChannelDisplay)control).Update(uid, state);
            }
        }

        // Clear the laws, not the entire UI
        LawDisplayContainer.Children.Clear();

        foreach (var law in state.Laws)
        {
            // Pass along the law information, the accessible channels for redundancy, and the selected channel
            var control = new LawDisplay(uid, law, state.RadioChannels, state.SelectedChannel);

            LawDisplayContainer.AddChild(control);
        }
    }
}
