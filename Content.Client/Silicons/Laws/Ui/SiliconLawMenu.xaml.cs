using Content.Client.UserInterface.Controls;
using Content.Shared.Chat;
using Content.Shared.Silicons.Laws.Components;
using Content.Shared.Radio;
using Robust.Client.AutoGenerated;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.XAML;
using Robust.Shared.Prototypes;
using Robust.Client.UserInterface;

namespace Content.Client.Silicons.Laws.Ui;

[GenerateTypedNameReferences]
public sealed partial class SiliconLawMenu : FancyWindow
{
    [Dependency] private readonly IPrototypeManager _prototypeManager = default!;
    [Dependency] private readonly EntityManager _entityManager = default!;
    public event Action<string>? LawChannelSelected;
    private string _lawChannel = SharedChatSystem.LocalChannel;
    private OptionButton? _lawChannelSelector;
    private SiliconLawBuiState? _state;
    private EntityUid? _uid;
    public SiliconLawMenu()
    {
        RobustXamlLoader.Load(this);
        IoCManager.InjectDependencies(this);
        // Pass this into the display so we can access the menu's Update() function, and have a stateful reference to the containing parent
        _lawChannelSelector = (OptionButton)LawDisplayHeader.GetChild(1);
        _lawChannelSelector.OnItemSelected += SelectLawChannel;
    }

    private void SelectLawChannel(OptionButton.ItemSelectedEventArgs args)
    {
        _lawChannel = (string)args.Button.GetItemMetadata(args.Id)!;
        LawChannelSelected?.Invoke((string)args.Button.GetItemMetadata(args.Id)!);
        if (_lawChannelSelector != null)
        {
            _lawChannelSelector.Select(args.Id);
            Update();
        }
    }

    public void Update(EntityUid? uid = null, SiliconLawBuiState? state = null)
    {
        // Store incoming state and uid to local variables so we can update while the UI is open. If there is no state or uid, do not update until we have one.
        if (state != null)
            _state = state;
        if (uid != null)
            _uid = uid;
        if (_uid == null || _state == null)
            return;

        _state.Laws.Sort();

        // Clear the laws, not the entire UI
        LawDisplayContainer.Children.Clear();

        foreach (var law in _state.Laws)
        {
            // Pass along the law information, the accessible channels for redundancy, and the selected channel
            var control = new LawDisplay((EntityUid)_uid, law, _state.RadioChannels, _lawChannel);

            LawDisplayContainer.AddChild(control);
        }
        if (_state.RadioChannels != null)
            AddChannels(_state.RadioChannels, _lawChannel);
    }

    public void AddChannels(HashSet<string> radioChannels, string? selectedChannel)
    {
        // Prevent duplicate channels in the list
        if (_lawChannelSelector != null)
            _lawChannelSelector.Clear();
        else
            _lawChannelSelector = (OptionButton)LawDisplayHeader.GetChild(0);
        if (radioChannels == null)
            return;
        foreach (var radioChannel in radioChannels)
        {
            if (!_prototypeManager.TryIndex<RadioChannelPrototype>(radioChannel, out var radioChannelProto))
                continue;
            _lawChannelSelector.AddItem(radioChannel);
            _lawChannelSelector.SetItemMetadata(_lawChannelSelector.ItemCount - 1, radioChannel);
        }
        // We should always have access to local
        _lawChannelSelector.AddItem(Loc.GetString("hud-chatbox-select-channel-Local"));
        _lawChannelSelector.SetItemMetadata(_lawChannelSelector.ItemCount - 1, SharedChatSystem.LocalChannel);
        _lawChannelSelector.Select(_lawChannelSelector.ItemCount - 1);
    }
}
